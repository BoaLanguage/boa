class Vector:

  member var x : Int
  member var y : Int

  def __init__(self : Vector, x : Int, y : Int) -> Vector:
    self.x = x
    self.y = y

    return self

  def add(self : Vector, other : Vector) -> Vector:
    self.x = self.x + other.x
    self.y = self.y + other.y

    return self

  def mult(self : Vector, c : Int) -> Vector:
    self.x = self.x * c
    self.y = self.y * c

    return self

  def mag(self:Vector) -> Int:
    self.x = self.x + 1

    return (self.x ** 2) + (self.y ** 2)

x = Vector(1, 4)
adder = Vector(11, 1)

def repeat(fun : Int -> Int, arg : Int, count : Int) -> Int:
  if count == 0:
    return arg
  else:
    if count == 1:
      return fun(arg)
    else:
      return fun(repeat(fun, arg, count - 1))
  

def add_maker(x : Int) -> Int -> Int:
  
  def add_x(y : Int) -> Int:
    return y + x
  
  return add_x

print(add_maker(5)(3))