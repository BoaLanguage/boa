RUNNING NOCHECK TESTS
tests/passing_nocheck/vector.boa
RUNNING: tests/passing_nocheck/vector.boa
Type checking skipped.

Evaluating the expression...


State After Execution:
  
y: {
	__class__ <- mutable ({
	mag <- Some closure
	mult <- Some closure
	add <- Some closure
	__init__ <- Some closure
	__mattrs__ <- y, x, 
	__attrs__ <- 

}
)
	y <- mutable (1)
	x <- mutable (11)

}

x: {
	__class__ <- mutable ({
	mag <- Some closure
	mult <- Some closure
	add <- Some closure
	__init__ <- Some closure
	__mattrs__ <- y, x, 
	__attrs__ <- 

}
)
	y <- mutable (5)
	x <- mutable (12)

}

Vector: mutable ({
	mag <- Some closure
	mult <- Some closure
	add <- Some closure
	__init__ <- Some closure
	__mattrs__ <- y, x, 
	__attrs__ <- 

}
)
RUNNING PASSING TESTS
tests/passing/indent.boa
tests/passing/recursion.boa
tests/passing/type_inference.boa
RUNNING: tests/passing/type_inference.boa
Inferred Types: [
is_f_of_int_positive => \./ ‡. (('‡ -> Int) -> ('‡ -> Bool))
should_be_42 => \./ . Int
fact => \./ . (Int -> (Int -> Int))
should_be_true => \./ . Bool
compose_fns => \./ r, t, u. (('u -> 't) -> (('r -> 'u) -> ('r -> 't)))
is_positive => \./ . (Int -> Bool)
add_5 => \./ . (Int -> Int)
apply_fn => \./ c, d. (('c -> 'd) -> ('c -> 'd))
]
Evaluating the expression...


State After Execution:
  
is_f_of_int_positive: Some closure
should_be_42: 42
fact: Some closure
should_be_true: true
compose_fns: Some closure
is_positive: Some closure
add_5: Some closure
apply_fn: Some closure
tests/failing/fail_type_inference.boa
RUNNING tests/failing/fail_type_inference.boa
Constraints: , Int == Bool, Int == Int 
Fatal error: exception Check.IllTyped("Typing of program led to above impossible constraints")
