type token =
  | VAR of (string)
  | TNAME of (string)
  | LPAREN
  | RPAREN
  | DOT
  | COLON
  | EOF
  | LAMBDA
  | ARROW
  | LET
  | EQUALS
  | IN
  | INT of (int)
  | PLUS
  | MINUS
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | TRUE
  | FALSE
  | AND
  | OR
  | NOT
  | EMPTY
  | CONS
  | MATCH
  | WEMPTY
  | WHDREST
  | LIST
  | COMMA
  | STAR
  | FIX

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Ast
  open Printf
  open Lexing

  let tuple_type ts =
  match ts with
  | [t] -> t
  | _ -> TTuple ts

  let tuple_expr es =
  match es with
  | [e] -> e
  | _ -> Tuple es
# 54 "parser.ml"
let yytransl_const = [|
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* DOT *);
  262 (* COLON *);
    0 (* EOF *);
  263 (* LAMBDA *);
  264 (* ARROW *);
  265 (* LET *);
  266 (* EQUALS *);
  267 (* IN *);
  269 (* PLUS *);
  270 (* MINUS *);
  271 (* LESS *);
  272 (* GREATER *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  276 (* TRUE *);
  277 (* FALSE *);
  278 (* AND *);
  279 (* OR *);
  280 (* NOT *);
  281 (* EMPTY *);
  282 (* CONS *);
  283 (* MATCH *);
  284 (* WEMPTY *);
  285 (* WHDREST *);
  286 (* LIST *);
  287 (* COMMA *);
  288 (* STAR *);
  289 (* FIX *);
    0|]

let yytransl_block = [|
  257 (* VAR *);
  258 (* TNAME *);
  268 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\004\000\004\000\005\000\005\000\
\006\000\006\000\008\000\008\000\009\000\009\000\010\000\010\000\
\011\000\011\000\011\000\012\000\012\000\012\000\012\000\013\000\
\013\000\014\000\014\000\014\000\015\000\015\000\016\000\016\000\
\017\000\017\000\018\000\018\000\018\000\018\000\018\000\018\000\
\007\000\020\000\020\000\021\000\021\000\019\000\019\000\019\000\
\000\000"

let yylen = "\002\000\
\002\000\006\000\001\000\001\000\003\000\001\000\002\000\001\000\
\006\000\001\000\006\000\001\000\006\000\001\000\002\000\001\000\
\003\000\003\000\001\000\003\000\003\000\003\000\001\000\003\000\
\001\000\003\000\003\000\001\000\003\000\001\000\002\000\001\000\
\003\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\001\000\003\000\001\000\003\000\001\000\001\000\002\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\035\000\000\000\000\000\000\000\036\000\000\000\
\037\000\038\000\000\000\000\000\000\000\000\000\049\000\000\000\
\003\000\004\000\000\000\008\000\010\000\012\000\014\000\000\000\
\000\000\023\000\000\000\000\000\000\000\000\000\034\000\000\000\
\000\000\000\000\000\000\015\000\000\000\000\000\007\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\
\046\000\000\000\000\000\039\000\000\000\005\000\000\000\000\000\
\022\000\020\000\021\000\000\000\000\000\024\000\000\000\033\000\
\000\000\000\000\041\000\043\000\000\000\000\000\000\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\000\000\000\
\009\000\042\000\000\000\044\000\002\000\013\000\011\000"

let yydgoto = "\002\000\
\015\000\016\000\017\000\018\000\019\000\020\000\073\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\074\000\075\000\076\000"

let yysindex = "\004\000\
\005\255\000\000\000\000\005\255\006\255\026\255\000\000\091\255\
\000\000\000\000\091\255\030\255\005\255\066\255\000\000\041\000\
\000\000\000\000\016\255\000\000\000\000\000\000\000\000\254\254\
\003\255\000\000\253\254\018\255\034\255\055\255\000\000\068\255\
\064\255\070\255\058\255\000\000\013\255\054\255\000\000\000\000\
\041\255\034\255\034\255\034\255\034\255\034\255\034\255\034\255\
\034\255\034\255\055\255\076\255\000\000\013\255\005\255\005\255\
\000\000\013\255\013\255\000\000\005\255\000\000\003\255\003\255\
\000\000\000\000\000\000\018\255\018\255\000\000\034\255\000\000\
\084\255\252\254\000\000\000\000\087\255\080\255\097\255\000\000\
\075\255\041\255\013\255\013\255\005\255\041\255\000\000\041\255\
\000\000\000\000\073\255\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\184\000\000\000\000\000\000\000\000\000\225\000\
\187\000\000\000\171\000\102\000\056\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\203\000\219\000\
\000\000\000\000\000\000\125\000\148\000\000\000\079\000\000\000\
\000\000\035\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\035\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\252\255\000\000\065\000\245\255\093\000\050\000\000\000\
\000\000\023\000\000\000\021\000\051\000\000\000\037\000\059\000\
\230\255\000\000\221\255\027\000\029\000"

let yytablesize = 512
let yytable = "\032\000\
\032\000\060\000\051\000\083\000\001\000\003\000\033\000\004\000\
\038\000\047\000\048\000\005\000\044\000\006\000\057\000\058\000\
\007\000\045\000\046\000\042\000\043\000\008\000\049\000\080\000\
\009\000\010\000\034\000\084\000\011\000\012\000\035\000\013\000\
\031\000\036\000\003\000\037\000\004\000\014\000\045\000\045\000\
\040\000\003\000\059\000\004\000\051\000\007\000\041\000\005\000\
\091\000\050\000\077\000\078\000\007\000\009\000\010\000\030\000\
\081\000\008\000\012\000\052\000\009\000\010\000\063\000\064\000\
\011\000\012\000\003\000\013\000\004\000\054\000\089\000\053\000\
\005\000\014\000\094\000\056\000\095\000\007\000\029\000\055\000\
\093\000\061\000\008\000\068\000\069\000\009\000\010\000\072\000\
\082\000\011\000\012\000\003\000\013\000\004\000\065\000\066\000\
\067\000\085\000\086\000\070\000\087\000\028\000\007\000\088\000\
\084\000\062\000\039\000\079\000\071\000\090\000\009\000\010\000\
\092\000\000\000\011\000\012\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\025\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
\000\000\000\000\019\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\000\000\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\000\000\000\032\000\032\000\000\000\000\000\000\000\
\000\000\000\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\000\000\032\000\032\000\032\000\032\000\032\000\032\000\
\000\000\032\000\032\000\000\000\032\000\032\000\000\000\032\000\
\032\000\031\000\000\000\031\000\031\000\000\000\000\000\000\000\
\000\000\000\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\000\000\031\000\031\000\031\000\031\000\031\000\031\000\
\000\000\031\000\031\000\030\000\031\000\031\000\000\000\031\000\
\031\000\030\000\030\000\000\000\030\000\030\000\030\000\030\000\
\000\000\030\000\030\000\000\000\000\000\030\000\030\000\000\000\
\000\000\030\000\029\000\030\000\030\000\000\000\030\000\030\000\
\029\000\029\000\000\000\029\000\029\000\029\000\029\000\000\000\
\029\000\029\000\000\000\000\000\029\000\029\000\000\000\000\000\
\029\000\028\000\029\000\029\000\000\000\029\000\029\000\028\000\
\028\000\000\000\028\000\028\000\028\000\028\000\000\000\028\000\
\028\000\000\000\000\000\028\000\028\000\000\000\000\000\028\000\
\026\000\028\000\028\000\000\000\028\000\000\000\026\000\026\000\
\000\000\026\000\026\000\026\000\026\000\000\000\026\000\026\000\
\000\000\000\000\026\000\026\000\000\000\000\000\026\000\027\000\
\026\000\026\000\000\000\026\000\000\000\027\000\027\000\000\000\
\027\000\027\000\027\000\027\000\000\000\027\000\027\000\000\000\
\000\000\027\000\027\000\000\000\000\000\027\000\025\000\027\000\
\027\000\000\000\027\000\000\000\025\000\025\000\000\000\000\000\
\000\000\025\000\025\000\006\000\025\000\025\000\019\000\000\000\
\025\000\025\000\006\000\000\000\000\000\019\000\025\000\025\000\
\000\000\025\000\006\000\000\000\019\000\019\000\017\000\000\000\
\019\000\019\000\000\000\006\000\006\000\017\000\019\000\019\000\
\000\000\019\000\000\000\000\000\017\000\017\000\018\000\000\000\
\017\000\017\000\000\000\000\000\016\000\018\000\017\000\017\000\
\000\000\017\000\000\000\016\000\018\000\018\000\000\000\000\000\
\018\000\018\000\016\000\016\000\000\000\000\000\018\000\018\000\
\000\000\018\000\000\000\000\000\016\000\016\000\000\000\016\000"

let yycheck = "\004\000\
\000\000\037\000\029\000\008\001\001\000\001\001\001\001\003\001\
\013\000\013\001\014\001\007\001\010\001\009\001\002\001\003\001\
\012\001\015\001\016\001\022\001\023\001\017\001\026\001\059\000\
\020\001\021\001\001\001\032\001\024\001\025\001\008\000\027\001\
\000\000\011\000\001\001\006\001\003\001\033\001\004\001\005\001\
\000\000\001\001\030\001\003\001\071\000\012\001\031\001\007\001\
\084\000\032\001\055\000\056\000\012\001\020\001\021\001\000\000\
\061\000\017\001\025\001\005\001\020\001\021\001\042\000\043\000\
\024\001\025\001\001\001\027\001\003\001\006\001\082\000\004\001\
\007\001\033\001\086\000\018\001\088\000\012\001\000\000\010\001\
\085\000\028\001\017\001\047\000\048\000\020\001\021\001\012\001\
\005\001\024\001\025\001\001\001\027\001\003\001\044\000\045\000\
\046\000\011\001\019\001\049\000\004\001\000\000\012\001\029\001\
\032\001\041\000\014\000\058\000\050\000\083\000\020\001\021\001\
\084\000\255\255\024\001\025\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\003\001\004\001\255\255\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\255\255\028\001\029\001\255\255\031\001\
\032\001\001\001\255\255\003\001\004\001\255\255\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\004\001\028\001\029\001\255\255\031\001\
\032\001\010\001\011\001\255\255\013\001\014\001\015\001\016\001\
\255\255\018\001\019\001\255\255\255\255\022\001\023\001\255\255\
\255\255\026\001\004\001\028\001\029\001\255\255\031\001\032\001\
\010\001\011\001\255\255\013\001\014\001\015\001\016\001\255\255\
\018\001\019\001\255\255\255\255\022\001\023\001\255\255\255\255\
\026\001\004\001\028\001\029\001\255\255\031\001\032\001\010\001\
\011\001\255\255\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\255\255\255\255\022\001\023\001\255\255\255\255\026\001\
\004\001\028\001\029\001\255\255\031\001\255\255\010\001\011\001\
\255\255\013\001\014\001\015\001\016\001\255\255\018\001\019\001\
\255\255\255\255\022\001\023\001\255\255\255\255\026\001\004\001\
\028\001\029\001\255\255\031\001\255\255\010\001\011\001\255\255\
\013\001\014\001\015\001\016\001\255\255\018\001\019\001\255\255\
\255\255\022\001\023\001\255\255\255\255\026\001\004\001\028\001\
\029\001\255\255\031\001\255\255\010\001\011\001\255\255\255\255\
\255\255\015\001\016\001\004\001\018\001\019\001\004\001\255\255\
\022\001\023\001\011\001\255\255\255\255\011\001\028\001\029\001\
\255\255\031\001\019\001\255\255\018\001\019\001\004\001\255\255\
\022\001\023\001\255\255\028\001\029\001\011\001\028\001\029\001\
\255\255\031\001\255\255\255\255\018\001\019\001\004\001\255\255\
\022\001\023\001\255\255\255\255\004\001\011\001\028\001\029\001\
\255\255\031\001\255\255\011\001\018\001\019\001\255\255\255\255\
\022\001\023\001\018\001\019\001\255\255\255\255\028\001\029\001\
\255\255\031\001\255\255\255\255\028\001\029\001\255\255\031\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  DOT\000\
  COLON\000\
  EOF\000\
  LAMBDA\000\
  ARROW\000\
  LET\000\
  EQUALS\000\
  IN\000\
  PLUS\000\
  MINUS\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NOT\000\
  EMPTY\000\
  CONS\000\
  MATCH\000\
  WEMPTY\000\
  WHDREST\000\
  LIST\000\
  COMMA\000\
  STAR\000\
  FIX\000\
  "

let yynames_block = "\
  VAR\000\
  TNAME\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 33 "parser.mly"
                                        ( _1 )
# 345 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 36 "parser.mly"
                                        ( Let(_2, _4, _6) )
# 354 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'texp) in
    Obj.repr(
# 37 "parser.mly"
                                        ( _1 )
# 361 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tlist) in
    Obj.repr(
# 40 "parser.mly"
                                        ( tuple_expr _1 )
# 368 "parser.ml"
               : 'texp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tlist) in
    Obj.repr(
# 43 "parser.mly"
                                        ( _1::_3 )
# 376 "parser.ml"
               : 'tlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fexp) in
    Obj.repr(
# 44 "parser.mly"
                                        ( [_1] )
# 383 "parser.ml"
               : 'tlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lexp) in
    Obj.repr(
# 47 "parser.mly"
                                        ( Fix(_2) )
# 390 "parser.ml"
               : 'fexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lexp) in
    Obj.repr(
# 48 "parser.mly"
                                        ( _1 )
# 397 "parser.ml"
               : 'fexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fexp) in
    Obj.repr(
# 51 "parser.mly"
                                        ( Lam(_2, _4, _6) )
# 406 "parser.ml"
               : 'lexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mexp) in
    Obj.repr(
# 52 "parser.mly"
                                        ( _1 )
# 413 "parser.ml"
               : 'lexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fexp) in
    Obj.repr(
# 55 "parser.mly"
                                        ( Match(_2, _4, _6) )
# 422 "parser.ml"
               : 'mexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifexp) in
    Obj.repr(
# 56 "parser.mly"
                                        ( _1 )
# 429 "parser.ml"
               : 'mexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'unexp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fexp) in
    Obj.repr(
# 59 "parser.mly"
                                        ( If(_2, _4, _6) )
# 438 "parser.ml"
               : 'ifexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unexp) in
    Obj.repr(
# 60 "parser.mly"
                                        ( _1 )
# 445 "parser.ml"
               : 'ifexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unexp) in
    Obj.repr(
# 63 "parser.mly"
                                        ( Unary(Not, _2) )
# 452 "parser.ml"
               : 'unexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'boolbinexp) in
    Obj.repr(
# 64 "parser.mly"
                                        ( _1 )
# 459 "parser.ml"
               : 'unexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'boolbinexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmpexp) in
    Obj.repr(
# 67 "parser.mly"
                                        ( Binary(And, _1, _3) )
# 467 "parser.ml"
               : 'boolbinexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'boolbinexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmpexp) in
    Obj.repr(
# 68 "parser.mly"
                                        ( Binary(Or, _1, _3) )
# 475 "parser.ml"
               : 'boolbinexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmpexp) in
    Obj.repr(
# 69 "parser.mly"
                                        ( _1 )
# 482 "parser.ml"
               : 'boolbinexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmpexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'consexp) in
    Obj.repr(
# 72 "parser.mly"
                                        ( Binary(Less, _1, _3) )
# 490 "parser.ml"
               : 'cmpexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmpexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'consexp) in
    Obj.repr(
# 73 "parser.mly"
                                        ( Binary(Greater, _1, _3) )
# 498 "parser.ml"
               : 'cmpexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmpexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'consexp) in
    Obj.repr(
# 74 "parser.mly"
                                        ( Binary(Equal, _1, _3) )
# 506 "parser.ml"
               : 'cmpexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'consexp) in
    Obj.repr(
# 75 "parser.mly"
                                        ( _1 )
# 513 "parser.ml"
               : 'cmpexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'plusexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'consexp) in
    Obj.repr(
# 78 "parser.mly"
                                         ( Binary(Cons, _1, _3) )
# 521 "parser.ml"
               : 'consexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'plusexp) in
    Obj.repr(
# 79 "parser.mly"
                                         ( _1 )
# 528 "parser.ml"
               : 'consexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'plusexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multexp) in
    Obj.repr(
# 82 "parser.mly"
                                        ( Binary(Plus, _1, _3) )
# 536 "parser.ml"
               : 'plusexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'plusexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multexp) in
    Obj.repr(
# 83 "parser.mly"
                                        ( Binary(Minus, _1, _3) )
# 544 "parser.ml"
               : 'plusexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multexp) in
    Obj.repr(
# 84 "parser.mly"
                                        ( _1 )
# 551 "parser.ml"
               : 'plusexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 87 "parser.mly"
                                       ( Binary(Times, _1, _3) )
# 559 "parser.ml"
               : 'multexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 88 "parser.mly"
                                       ( _1 )
# 566 "parser.ml"
               : 'multexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pexp) in
    Obj.repr(
# 91 "parser.mly"
                                        ( App(_1, _2) )
# 574 "parser.ml"
               : 'appexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pexp) in
    Obj.repr(
# 92 "parser.mly"
                                        ( _1 )
# 581 "parser.ml"
               : 'appexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 95 "parser.mly"
                                        ( Proj(_1, _3) )
# 589 "parser.ml"
               : 'pexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 96 "parser.mly"
                                        ( _1 )
# 596 "parser.ml"
               : 'pexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 99 "parser.mly"
                                        ( Var(_1) )
# 603 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 100 "parser.mly"
                                        ( Int(_1) )
# 610 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
                                        ( True )
# 616 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
                                        ( False )
# 622 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atyp) in
    Obj.repr(
# 103 "parser.mly"
                                        ( Empty(_3) )
# 629 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 104 "parser.mly"
                                        ( _2 )
# 636 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ftyp) in
    Obj.repr(
# 107 "parser.mly"
                                        ( _1 )
# 643 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atyp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ftyp) in
    Obj.repr(
# 110 "parser.mly"
                                        ( TFun(_1, _3) )
# 651 "parser.ml"
               : 'ftyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ttlist) in
    Obj.repr(
# 111 "parser.mly"
                                        ( tuple_type _1 )
# 658 "parser.ml"
               : 'ftyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atyp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ttlist) in
    Obj.repr(
# 114 "parser.mly"
                                        ( _1::_3 )
# 666 "parser.ml"
               : 'ttlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atyp) in
    Obj.repr(
# 115 "parser.mly"
                                        ( [_1] )
# 673 "parser.ml"
               : 'ttlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 118 "parser.mly"
                                        ( TBase(_1) )
# 680 "parser.ml"
               : 'atyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atyp) in
    Obj.repr(
# 119 "parser.mly"
                                        ( TList(_2) )
# 687 "parser.ml"
               : 'atyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 120 "parser.mly"
                                        ( _2 )
# 694 "parser.ml"
               : 'atyp))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.exp)
